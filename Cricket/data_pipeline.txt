-- data pipeline--

-- step 1: creating stream on RAW tables for three different streams --
create or replace stream cricket.raw.for_match_stream on table cricket.raw.match_raw_tbl append_only= True;
create or replace stream cricket.raw.for_player_stream on table cricket.raw.match_raw_tbl append_only= True;
create or replace stream cricket.raw.for_delivery_stream on table cricket.raw.match_raw_tbl append_only= True;
CRICKET.RAW.LOAD_TO_PLAYER_DIM
-- step 2: creating a task that runs every 5min to load JSON data into raw layer --

create or replace task cricket.raw.load_json_to_raw
warehouse = 'COMPUTE_WH'
schedule = '10 minute'
as
copy into cricket.raw.match_raw_tbl from 
    (
    select 
        t.$1:meta::object as meta, 
        t.$1:info::variant as info, 
        t.$1:innings::array as innings, 
        --
        metadata$filename,
        metadata$file_row_number,
        metadata$file_content_key,
        metadata$file_last_modified
    from @cricket.land.my_stg/cricket/json (file_format => 'cricket.land.my_json_format') t
    )
    on_error = continue;

-- step 3: creating another child task to read stream and load data into the clean layer --
-- load_to_clean_match--
create or replace task cricket.raw.load_to_clean_match
warehouse = 'COMPUTE_WH'
after cricket.raw.load_json_to_raw
when system$stream_has_data('cricket.raw.for_match_stream')
as
insert into cricket.clean.match_detail_clean
select
    info:match_type_number::int as match_type_number, 
    info:event.name::text as event_name,
    case
    when 
        info:event.match_number::text is not null then info:event.match_number::text
    when 
        info:event.stage::text is not null then info:event.stage::text
    else
        'NA'
    end as match_stage,   
    info:dates[0]::date as event_date,
    date_part('year',info:dates[0]::date) as event_year,
    date_part('month',info:dates[0]::date) as event_month,
    date_part('day',info:dates[0]::date) as event_day,
    info:match_type::text as match_type,
    info:season::text as season,
    info:team_type::text as team_type,
    info:overs::text as overs,
    info:city::text as city,
    info:venue::text as venue, 
    info:gender::text as gender,
    info:teams[0]::text as first_team,
    info:teams[1]::text as second_team,
    case 
        when info:outcome.winner is not null then 'Result Declared'
        when info:outcome.result = 'tie' then 'Tie'
        when info:outcome.result = 'no result' then 'No Result'
        else info:outcome.result
    end as matach_result,
    case 
        when info:outcome.winner is not null then info:outcome.winner
        else 'NA'
    end as winner,   

    info:toss.winner::text as toss_winner,
    initcap(info:toss.decision::text) as toss_decision,
    --
    stg_file_name ,
    stg_file_row_number,
    stg_file_hashkey,
    stg_modified_ts
    from 
    cricket.raw.for_match_stream;

--load_to_clean_player--
create or replace task cricket.raw.load_to_clean_player
warehouse = 'COMPUTE_WH'
after cricket.raw.load_to_clean_match
when system$stream_has_data('cricket.raw.for_player_stream')
as
insert into cricket.clean.player_table_clean
select 
   raw.info:match_type_number::int as match_type_number,
   p.key::text as team,
   player.value::text as player_name,
   raw.stg_file_name,
   raw.stg_file_hashkey,
   raw.stg_file_row_number
   from cricket.raw.for_player_stream as raw,
   lateral flatten(input=> raw.info:players) as p,
   lateral flatten(input=> p.value) as player;

-- load_to_clean_delivery--
create or replace task cricket.raw.load_to_clean_delivery
warehouse = 'COMPUTE_WH'
after cricket.raw.load_to_clean_player
when system$stream_has_data('cricket.raw.for_delivery_stream')
as
insert into cricket.clean.delivery_clean_tbl
select raw.info:match_type_number::int as match_type_number,
   i.value:team::text as Team_Name,
   o.value:over::int+1 as over_number, -- since over starts as 0 we are adding +1 to start it from 1
   d.value:bowler::text as bowler,
   d.value:batter::text as batter,
   d.value:non_striker::text as non_striker,
   d.value:runs.batter::text as run,
   d.value:runs:extras::text as extra,
   d.value:runs:total::text as total_run,
   e.key::text as extra_type,
   e.value::number as extra_runs,
   w.value:player_out::text as player_out,
   w.value:kind::text as player_out_kind,
   w.value:fielders::text as fielders
   from cricket.raw.for_delivery_stream raw,
   lateral flatten(input => raw.innings) i,
   lateral flatten(input => i.value:overs) o,
   lateral flatten(input => o.value:deliveries) d,
   lateral flatten(input => d.value:extras, outer=>True) e,
   lateral flatten(input => d.value:wickets, outer=>True) w;


--step 4: create a task to load data to team_dim --
create or replace task cricket.raw.load_to_team_dim
warehouse = 'COMPUTE_WH'
after cricket.raw.load_to_clean_delivery
as
insert into cricket.public.team_dim (team_name)
select distinct team_name from
(
 select first_team as team_name from cricket.clean.match_detail_clean
 union all
 select second_team as team_name from cricket.clean.match_detail_clean
);

--step 5: create task to load data to player_dim --
create or replace task cricket.raw.load_to_player_dim
warehouse = 'COMPUTE_WH'
after cricket.raw.load_to_clean_delivery
as
insert into cricket.public.player_dim (team_id,player_name)
select t.team_id,t.team_name,p.player_name
from cricket.clean.player_table_clean p join cricket.public.team_dim t
on p.team = t.team_name
group by
t.team_id,
t.team_name,
p.player_name;

--step 6: create task to load data to 
create or replace task cricket.raw.load_to_venue_dim
warehouse = 'COMPUTE_WH'
after cricket.raw.load_to_clean_delivery
as
insert into cricket.public.venue_dim (venue_name,city)
select venue,
case 
when city is null then 'NA'
else city
end as city
from cricket.clean.match_detail_clean
group by venue,city;

--step 7: populate the match_fact_table
create or replace task cricket.raw.load_match_fact
warehouse = 'COMPUTE_WH'
after cricket.raw.load_to_team_dim,cricket.raw.load_to_player_dim,cricket.raw.load_to_venue_dim
as
insert into cricket.public.match_fact
select a.* from(
select 
    m.match_type_number as match_id,
    dd.date_id as date_id,
    0 as referee_id,
    ftd.team_id as first_team_id,
    std.team_id as second_team_id,
    mtd.match_type_id as match_type_id,
    vd.venue_id as venue_id,
    50 as total_overs,
    6 as balls_per_overs,
    max(case when d.team_name = m.first_team then  d.over_number else 0 end ) as OVERS_PLAYED_BY_TEAM_A,
    sum(case when d.team_name = m.first_team then  1 else 0 end ) as balls_PLAYED_BY_TEAM_A,
    sum(case when d.team_name = m.first_team then  d.extra else 0 end ) as extra_balls_PLAYED_BY_TEAM_A,
    sum(case when d.team_name = m.first_team then  d.extra_runs else 0 end ) as extra_runs_scored_BY_TEAM_A,
    0 fours_by_team_a,
    0 sixes_by_team_a,
    (sum(case when d.team_name = m.first_team then  d.run else 0 end ) + sum(case when d.team_name = m.first_team then  d.extra_runs else 0 end ) ) as total_runover_numbers_scored_BY_TEAM_A,
    sum(case when d.team_name = m.first_team and player_out is not null then  1 else 0 end ) as wicket_lost_by_team_a,    
    
    max(case when d.team_name = m.second_team then  d.over_number else 0 end ) as OVERS_PLAYED_BY_TEAM_B,
    sum(case when d.team_name = m.second_team then  1 else 0 end ) as balls_PLAYED_BY_TEAM_B,
    sum(case when d.team_name = m.second_team then  d.extra else 0 end ) as extra_balls_PLAYED_BY_TEAM_B,
    sum(case when d.team_name = m.second_team then  d.extra_runs else 0 end ) as extra_runs_scored_BY_TEAM_B,
    0 fours_by_team_b,
    0 sixes_by_team_b,
    (sum(case when d.team_name = m.second_team then  d.run else 0 end ) + sum(case when d.team_name = m.second_team then  d.extra_runs else 0 end ) ) as total_runs_scored_BY_TEAM_B,
    sum(case when d.team_name = m.second_team and player_out is not null then  1 else 0 end ) as wicket_lost_by_team_b,
    tw.team_id as toss_winner_team_id,
    m.toss_decision as toss_decision,
    m.matach_result as matach_result,
    mw.team_id as winner_team_id
     
from 
    cricket.clean.match_detail_clean m
    join date_dim dd on m.event_date = dd.full_dt
    join team_dim ftd on m.first_team = ftd.team_name 
    join team_dim std on m.second_team = std.team_name 
    join match_type_dim mtd on m.match_type = mtd.match_type
    join venue_dim vd on m.venue = vd.venue_name and m.city = vd.city
    join cricket.clean.delivery_clean_tbl d  on d.match_type_number = m.match_type_number 
    join team_dim tw on m.toss_winner = tw.team_name 
    join team_dim mw on m.winner= mw.team_name 
    group by
        m.match_type_number,
        date_id,
        referee_id,
        first_team_id,
        second_team_id,
        match_type_id,
        venue_id,
        total_overs,
        toss_winner_team_id,
        toss_decision,
        matach_result,
        winner_team_id) a
        left join cricket.public.match_fact b on a.match_id = b.match_id
        where b.match_id is null;


        
--step 8:populate the delivery_fact table 
create or replace task cricket.raw.load_delivery_fact
warehouse = 'COMPUTE_WH'
after cricket.raw.load_match_fact
as
INSERT INTO cricket.public.delivery_fact
select a.* from(
SELECT 
    d.match_type_number AS match_id,
    td.team_id AS team_id,  -- batting team
    
    -- Correct bowler_id by joining on opponent team
    blr.player_id AS bowler_id,

    -- Correct batter_id using team_id + player_name
    btr.player_id AS batter_id,

    -- Correct non-striker_id
    nstr.player_id AS non_striker_id,

    d.over_number AS over,
    d.run AS runs,
    COALESCE(d.extra_runs, 0) AS extra_runs,
    COALESCE(d.extra_type, 'None') AS extra_type,
    COALESCE(d.player_out, 'None') AS player_out,
    COALESCE(d.player_out_kind, 'None') AS player_out_kind

FROM cricket.clean.delivery_clean_tbl d
-- Get batting team_id
JOIN cricket.public.team_dim td 
    ON d.team_name = td.team_name
-- Match details (for match_id and team matchup)
JOIN cricket.clean.match_detail_clean mdc 
    ON d.match_type_number = mdc.match_type_number
-- Opponent team: if batting team is first, then bowler must be from second, and vice versa
JOIN cricket.public.team_dim opp_td 
    ON (
        mdc.first_team = d.team_name AND mdc.second_team = opp_td.team_name
        OR
        mdc.second_team = d.team_name AND mdc.first_team = opp_td.team_name
    )
-- Join batter with correct team
JOIN cricket.public.player_dim btr 
    ON d.batter = btr.player_name AND td.team_id = btr.team_id
-- Join non-striker with correct team
JOIN cricket.public.player_dim nstr 
    ON d.non_striker = nstr.player_name AND td.team_id = nstr.team_id
-- Join bowler with **opponent** team
JOIN cricket.public.player_dim blr 
    ON d.bowler = blr.player_name AND opp_td.team_id = blr.team_id) a
    left join cricket.public.delivery_fact b on a.match_id = b.match_id
    where b.match_id is null;


use role accountadmin;
grant execute task,execute managed task on account to role sysadmin;
use role sysadmin;


-- resuming the tasks --
alter task cricket.raw.load_delivery_fact resume;
alter task cricket.raw.load_match_fact resume;
alter task cricket.raw.load_to_venue_dim resume;
alter task cricket.raw.load_to_player_dim resume;
alter task cricket.raw.load_to_team_dim resume;
alter task cricket.raw.load_to_clean_delivery resume;
alter task cricket.raw.load_to_clean_player resume;
alter task cricket.raw.load_to_clean_match resume;
alter task cricket.raw.load_json_to_raw resume;


-- GRANT ALL PRIVILEGES ON SCHEMA cricket.raw TO ROLE SYSADMIN;

-- GRANT ALL PRIVILEGES ON STREAM cricket.raw.for_delivery_stream TO ROLE SYSADMIN;
-- GRANT ALL PRIVILEGES ON STREAM cricket.raw.for_match_stream TO ROLE SYSADMIN;
-- GRANT ALL PRIVILEGES ON STREAM cricket.raw.for_player_stream TO ROLE SYSADMIN;
-- -- Grant control on task
-- GRANT ALL PRIVILEGES ON TASK cricket.raw.load_delivery_fact TO ROLE SYSADMIN;
-- GRANT ALL PRIVILEGES ON TASK cricket.raw.load_json_to_raw TO ROLE SYSADMIN;
-- GRANT ALL PRIVILEGES ON TASK cricket.raw.load_match_fact TO ROLE SYSADMIN;
-- GRANT ALL PRIVILEGES ON TASK cricket.raw.load_to_clean_delivery TO ROLE SYSADMIN;
-- GRANT ALL PRIVILEGES ON TASK cricket.raw.load_to_clean_match TO ROLE SYSADMIN;
-- GRANT ALL PRIVILEGES ON TASK cricket.raw.load_to_clean_player TO ROLE SYSADMIN;
-- GRANT ALL PRIVILEGES ON TASK cricket.raw.load_to_player_dim TO ROLE SYSADMIN;
-- GRANT ALL PRIVILEGES ON TASK cricket.raw.load_to_team_dim TO ROLE SYSADMIN;
-- GRANT ALL PRIVILEGES ON TASK cricket.raw.load_to_venue_dim TO ROLE SYSADMIN;


