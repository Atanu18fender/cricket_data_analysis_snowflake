--fact_dim_table--

use role sysadmin;
use warehouse compute_wh;
use schema cricket.public;

-- date dim table --
create or replace table date_dim
(
    date_id int primary key autoincrement,
    full_dt date,
    day int,
    month int,
    year int,
    quarter int,
    dayofweek int,
    dayofmonth int,
    dayofyear int,
    dayofweekname varchar(3), -- to store the day names (e.g. 'Mon')
    isweekend boolean -- to indicate if it's a weekend or not (True/False Sat/Sun both falls under weekend)
);

-- referee dim table --
create or replace table referee_dim
(  
    referee_id int primary key autoincrement,
    referee_name text not null,
    referee_type text not null
    
);

-- team dim table --
create or replace table team_dim
(
    team_id int primary key identity(1,1),
    team_name text not null
);

-- player dim table --
create or replace table player_dim
(
    player_id int primary key autoincrement,
    team_id int not null,
    player_name text not null
);

alter table player_dim
add constraint fk_team_player_id 
foreign key (team_id)
references cricket.public.team_dim (team_id);

-- venue dim table --
create or replace table venue_dim (
    venue_id int primary key autoincrement,
    venue_name text not null,
    city text not null,
    state text,
    country text,
    continent text,
    end_Names text,
    capacity number,
    pitch text,
    flood_light boolean,
    established_dt date,
    playing_area text,
    other_sports text,
    curator text,
    lattitude number(10,6),
    longitude number(10,6)
);

-- match type dim table --
create or replace table match_type_dim (
    match_type_id int primary key autoincrement,
    match_type text not null
);

-- match fact table --
CREATE or replace TABLE match_fact (
    match_id INT PRIMARY KEY,
    date_id INT NOT NULL,
    referee_id INT NOT NULL,
    team_a_id INT NOT NULL,
    team_b_id INT NOT NULL,
    match_type_id INT NOT NULL,
    venue_id INT NOT NULL,
    total_overs number(3),
    balls_per_over number(1),

    overs_played_by_team_a number(2),
    bowls_played_by_team_a number(3),
    extra_bowls_played_by_team_a number(3),
    extra_runs_scored_by_team_a number(3),
    fours_by_team_a number(3),
    sixes_by_team_a number(3),
    total_score_by_team_a number(3),
    wicket_lost_by_team_a number(2),

    overs_played_by_team_b number(2),
    bowls_played_by_team_b number(3),
    extra_bowls_played_by_team_b number(3),
    extra_runs_scored_by_team_b number(3),
    fours_by_team_b number(3),
    sixes_by_team_b number(3),
    total_score_by_team_b number(3),
    wicket_lost_by_team_b number(2),

    toss_winner_team_id int not null, 
    toss_decision text not null, 
    match_result text not null, 
    winner_team_id int not null,

    CONSTRAINT fk_date FOREIGN KEY (date_id) REFERENCES date_dim (date_id),
    CONSTRAINT fk_referee FOREIGN KEY (referee_id) REFERENCES referee_dim (referee_id),
    CONSTRAINT fk_team1 FOREIGN KEY (team_a_id) REFERENCES team_dim (team_id),
    CONSTRAINT fk_team2 FOREIGN KEY (team_b_id) REFERENCES team_dim (team_id),
    CONSTRAINT fk_match_type FOREIGN KEY (match_type_id) REFERENCES match_type_dim (match_type_id),
    CONSTRAINT fk_venue FOREIGN KEY (venue_id) REFERENCES venue_dim (venue_id),

    CONSTRAINT fk_toss_winner_team FOREIGN KEY (toss_winner_team_id) REFERENCES team_dim (team_id),
    CONSTRAINT fk_winner_team FOREIGN KEY (winner_team_id) REFERENCES team_dim (team_id)
);


-- Let's start with Team dim and for simplicity, it is just team name --
-- creating with ICC cricket WC 2023 data (Afganistan record is missing)--

select * from cricket.clean.match_detail_clean
where event_name like '%ICC Cricket World Cup'
and YEAR(EVENT_DATE) like '2023%';

select distinct team_name from (
 select first_team as team_name from cricket.clean.match_detail_clean
 union all
 select second_team as team_name from cricket.clean.match_detail_clean
);

-- version 2 --
delete from cricket.public.team_dim;

insert into cricket.public.team_dim (team_name)
select distinct team_name from
(
 select first_team as team_name from cricket.clean.match_detail_clean
 union all
 select second_team as team_name from cricket.clean.match_detail_clean
);

select * from cricket.public.team_dim
where team_name like '%India%';

select * from cricket.public.team_dim
order by team_id;

-- player_dim table load --
-- version 1 --
select * from cricket.clean.player_table_clean;

-- version 2 --
select team,player_name from cricket.clean.player_table_clean
group by team,player_name; 

select * from cricket.clean.player_table_clean limit 50;
-- version 3 --
select p.player_name,t.team_name,t.team_id
from cricket.clean.player_table_clean p join cricket.public.team_dim t
on p.team = t.team_name
group by
p.player_name,
t.team_name,
t.team_id;

-- version 4 --
insert into cricket.public.player_dim (team_id,player_name)
select t.team_id,t.team_name,p.player_name
from cricket.clean.player_table_clean p join cricket.public.team_dim t
on p.team = t.team_name
group by
t.team_id,
t.team_name,
p.player_name;

-- since we have not captured the referee detail in the previous layer
-- we will skip it for now, we need to understand the structure well 
-- before we can design the referee

-- version 1 --
select * from cricket.clean.match_detail_clean;

-- version 2 --
select info from cricket.raw.match_raw_tbl limit 1;

-- version 3 --
select
info:officials.match_referees[0]::text as match_referees,
info:officials.reserve_umpires[0]::text as reserve_umpire,
info:officials.tv_umpires[0]::text as tv_umpire,
info:officials.umpires[0]::text as first_umpire,
info:officials.umpires[1]::text as second_umpire
from cricket.raw.match_raw_tbl limit 1;

-- venue_dim table load --

-- version 1 --
select * from cricket.clean.match_detail_clean;

-- version 2 --
select city,venue from cricket.clean.match_detail_clean;

-- version 3 --
select venue,city from cricket.clean.match_detail_clean
group by venue,city;


-- version 4 --
insert into cricket.public.venue_dim (venue_name,city)
select venue,
case 
when city is null then 'NA'
else city
end as city
from cricket.clean.match_detail_clean
group by venue,city;

select * from cricket.public.venue_dim;

-- version 5 --
select * from cricket.public.venue_dim where city = 'Bengaluru';

select city from cricket.public.venue_dim group by city having count(1)>1;


-- match_type_dim table load --

-- version 1 --
select * from from cricket.clean.match_detail_clean;

-- version 2 --
select match_type from cricket.clean.match_detail_clean
group by match_type;

-- version 3 --
select * from cricket.public.match_type_dim;

insert into cricket.public.match_type_dim (match_type)
select match_type from cricket.clean.match_detail_clean
where match_type='ODI'
group by match_type;

select * from cricket.public.match_type_dim;

-- date_dim table load --

select min(event_date),max(event_date) from cricket.clean.match_detail_clean;
--2019-06-18 2024-09-29

CREATE or replace transient TABLE cricket.public.date_range01 (Date DATE);

INSERT INTO cricket.public.date_range01 (Date)
WITH RECURSIVE date_cte AS (
    SELECT DATE '2019-01-01' AS date_val
    UNION ALL
    SELECT date_val + 1
    FROM date_cte
    WHERE date_val < DATE '2024-12-31'
)
SELECT date_val FROM date_cte;

select * from cricket.public.date_range01;

INSERT INTO cricket.public.date_dim (Date_ID, Full_Dt, Day, Month, Year, Quarter, DayOfWeek, DayOfMonth, DayOfYear, DayOfWeekName, IsWeekend)
SELECT
    ROW_NUMBER() OVER (ORDER BY Date) AS DateID,
    Date AS FullDate,
    EXTRACT(DAY FROM Date) AS Day,
    EXTRACT(MONTH FROM Date) AS Month,
    EXTRACT(YEAR FROM Date) AS Year,
    CASE WHEN EXTRACT(QUARTER FROM Date) IN (1, 2, 3, 4) THEN EXTRACT(QUARTER FROM Date) END AS Quarter,
    DAYOFWEEKISO(Date) AS DayOfWeek,
    EXTRACT(DAY FROM Date) AS DayOfMonth,
    DAYOFYEAR(Date) AS DayOfYear,
    DAYNAME(Date) AS DayOfWeekName,
    CASE When DAYNAME(Date) IN ('Sat', 'Sun') THEN 1 ELSE 0 END AS IsWeekend
FROM cricket.public.date_range01;

select * from cricket.public.date_dim;


----------------------- Let's dive into fact table load ----------------------
select * from cricket.clean.match_detail_clean;
-- version 1 --
select m.match_type_number as match_id,
dd.date_id,
0 as referee_id
from cricket.clean.match_detail_clean m
join date_dim dd on m.event_date = dd.full_dt
where match_type_number = '4686';

-- version 2 with team --
select m.match_type_number as match_id,
dd.date_id,
ftm.team_id as first_team_id,
stm.team_id as second_team_id,
0 as referee_id
from cricket.clean.match_detail_clean m
join date_dim dd on m.event_date = dd.full_dt
join team_dim ftm on m.first_team = ftm.team_name
join team_dim stm on m.second_team = stm.team_name 
where match_type_number = '4686';

-- version 3 match type --
select m.match_type_number as match_id,
dd.date_id,
ftm.team_id as first_team_id,
stm.team_id as second_team_id,
mtd.match_type_id,
0 as referee_id
from cricket.clean.match_detail_clean m
join date_dim dd on m.event_date = dd.full_dt
join team_dim ftm on m.first_team = ftm.team_name
join team_dim stm on m.second_team = stm.team_name
join match_type_dim mtd on m.match_type = mtd.match_type 
where match_type_number = '4686';

-- version 4 match venue id --
select m.match_type_number as match_id,
dd.date_id,
ftm.team_id as first_team_id,
stm.team_id as second_team_id,
mtd.match_type_id,
vd.venue_id,
0 as referee_id
from cricket.clean.match_detail_clean m
join date_dim dd on m.event_date = dd.full_dt
join team_dim ftm on m.first_team = ftm.team_name
join team_dim stm on m.second_team = stm.team_name
join match_type_dim mtd on m.match_type = mtd.match_type
join venue_dim vd on m.venue = vd.venue_name
where match_type_number = '4686';

select * from cricket.clean.delivery_clean_tbl
where match_type_number=4686;


-- Fact table data population --
select * from cricket.public.match_fact;

insert into cricket.public.match_fact
select 
    m.match_type_number as match_id,
    dd.date_id as date_id,
    0 as referee_id,
    ftd.team_id as first_team_id,
    std.team_id as second_team_id,
    mtd.match_type_id as match_type_id,
    vd.venue_id as venue_id,
    50 as total_overs,
    6 as balls_per_overs,
    max(case when d.team_name = m.first_team then  d.over_number else 0 end ) as OVERS_PLAYED_BY_TEAM_A,
    sum(case when d.team_name = m.first_team then  1 else 0 end ) as balls_PLAYED_BY_TEAM_A,
    sum(case when d.team_name = m.first_team then  d.extra else 0 end ) as extra_balls_PLAYED_BY_TEAM_A,
    sum(case when d.team_name = m.first_team then  d.extra_runs else 0 end ) as extra_runs_scored_BY_TEAM_A,
    0 fours_by_team_a,
    0 sixes_by_team_a,
    (sum(case when d.team_name = m.first_team then  d.run else 0 end ) + sum(case when d.team_name = m.first_team then  d.extra_runs else 0 end ) ) as total_runover_numbers_scored_BY_TEAM_A,
    sum(case when d.team_name = m.first_team and player_out is not null then  1 else 0 end ) as wicket_lost_by_team_a,    
    
    max(case when d.team_name = m.second_team then  d.over_number else 0 end ) as OVERS_PLAYED_BY_TEAM_B,
    sum(case when d.team_name = m.second_team then  1 else 0 end ) as balls_PLAYED_BY_TEAM_B,
    sum(case when d.team_name = m.second_team then  d.extra else 0 end ) as extra_balls_PLAYED_BY_TEAM_B,
    sum(case when d.team_name = m.second_team then  d.extra_runs else 0 end ) as extra_runs_scored_BY_TEAM_B,
    0 fours_by_team_b,
    0 sixes_by_team_b,
    (sum(case when d.team_name = m.second_team then  d.run else 0 end ) + sum(case when d.team_name = m.second_team then  d.extra_runs else 0 end ) ) as total_runs_scored_BY_TEAM_B,
    sum(case when d.team_name = m.second_team and player_out is not null then  1 else 0 end ) as wicket_lost_by_team_b,
    tw.team_id as toss_winner_team_id,
    m.toss_decision as toss_decision,
    m.matach_result as matach_result,
    mw.team_id as winner_team_id
     
from 
    cricket.clean.match_detail_clean m
    join date_dim dd on m.event_date = dd.full_dt
    join team_dim ftd on m.first_team = ftd.team_name 
    join team_dim std on m.second_team = std.team_name 
    join match_type_dim mtd on m.match_type = mtd.match_type
    join venue_dim vd on m.venue = vd.venue_name and m.city = vd.city
    join cricket.clean.delivery_clean_tbl d  on d.match_type_number = m.match_type_number 
    join team_dim tw on m.toss_winner = tw.team_name 
    join team_dim mw on m.winner= mw.team_name 
    group by
        m.match_type_number,
        date_id,
        referee_id,
        first_team_id,
        second_team_id,
        match_type_id,
        venue_id,
        total_overs,
        toss_winner_team_id,
        toss_decision,
        matach_result,
        winner_team_id;

select * from cricket.public.match_type_dim;


select * from cricket.public.match_fact;
